digraph G {
	node[shape=plain, fontname=Arial, fontsize=10, style=filled, fillcolor=azure]
	edge[fontname=Arial, fontsize=10, fontcolor=grey]
	
	[%
	var elements = M.allInstances();
	var colors = Sequence{"azure", "beige", "floralwhite", "lemonchiffon", "mistyrose", "palegreen", "pink", "wheat", "plum"};
	%]
	
	[*Generate a node for every element in the model*]
	[%for (e in elements) { %]
	[%=e.getNodeId()%][label = <
		<table bgcolor="[%=colors.get(e.eClass().eContainer().eContents().indexOf(e.eClass()).mod(colors.size()))%]" cellspacing='-1' cellborder='0' cellpadding='1'>
			<tr>
				<td border="1" sides="B">[%=e.getNodeLabel()%]</td>
			</tr>
			<tr><td cellpadding="5"><table border="0" cellborder="0" cellspacing="1" cellpadding="0">
			[%var attributes = e.eClass().getEAllAttributes().select(attr|e.eIsSet(attr));%]
			[%for (attr in attributes){%]
			<tr>
				<td>
					[%=attr.name%] = [%=e.getAttributeValue(attr)%]
				</td>
			</tr>
			[%}%]
			[%if (attributes.isEmpty()){%]
			<tr><td> </td></tr>
			[%}%]
			</table></td></tr>
		</table>
		>]
	[%}%]
	
	[*Generate an edge for every reference between elements omitting opposites*]
	[%for (e in elements) {%]
	[%for (r in e.getReferenced()) {%]
	[%for (v in r.at(0).select(r|M.allInstances().includes(r))){%]
	[%if (r.at(1).eOpposite.isUndefined() or r.at(1).eOpposite.name.compareTo(r.at(1).name) > 0){%]
	
	[%=e.getNodeId()%] -> [%=v.getNodeId()%][%=getReferenceLabel(e, v, r.at(1))%]
	[%}}}}%]
	
	[*Generate validation nodes*]
	[%if (unsatisfiedConstraints.isDefined()){%]
	[%for (uc in unsatisfiedConstraints){%]
	uc[%=loopCount%][label="[%=uc.getMessage().replaceAll('"','\\"').toMultiline()%]", fillcolor="[%=uc.getConstraint().getConstraintColour()%]", shape="rectangle"]
	uc[%=loopCount%] -> [%=uc.getInstance().getNodeId()%][arrowhead=none, style=dashed]
	
	[%}%]
	[%}%]
	
	[*Generate pattern nodes*]
	[%if (matches.isDefined()){%]
	[%for (match in matches){%]
	[%var matchNodeId = "match" + loopCount;%]
	[%=matchNodeId%][label="[%=match.pattern.name%]", fillcolor="gold", shape="rectangle"];
	[%for (key in match.roleBindings.keySet()){%]
	[%var values = match.roleBindings.get(key).asSequence();%]
	[%for (value in values){%]
	[%=matchNodeId%]->[%=value.getNodeId()%][label="[%=key%]", arrowhead=none, style=dashed]
	[%}%]
	[%}%]
	[%}%]
	[%}%]
}
[%
operation Any getNodeId() {
	return "N" + M.allInstances().indexOf(self);
}
operation Any getNodeLabel() {
	return ":" + self.eClass().name + " ";
}

operation Any getAttributeValue(attr) {
	var value = self.eGet(attr) + "";
	value = value.escapeXml();
	var chopped = false;
	if (value.indexOf("\n").asVar("newLineIndex") > -1) {
		value = value.substring(0, newLineIndex);
		chopped = true;
	}
	if (value.length() > 20) { 
		value = value.substring(0, 20);
		chopped = true;
	}
	if (chopped) value += " ...";
	return value;
}

operation Any getReferenced() {

	if (self.isUndefined()) return Sequence{};

	var c = self.eClass();
	var referenced : Sequence;
	for (r in c.getEAllReferences()) {
		referenced.add(Sequence{self.eGet(r).asSequence(), r});
	}
	return referenced;
}
operation getReferenceLabel(s, t, r) {
	
	for (ref in s.eClass().getEAllReferences()) {
		if (ref.eType.isSuperTypeOf(t.eClass()) and r <> ref) {
			return "[label=\"  " + r.name + "  \"]";
		}
	}
	return "";
}

operation Integer mod(i : Integer) {
return self - (self/i * i);
}

operation Any getConstraintColour() {
	if (self.isCritique()) return "khaki1";
	else return "mistyrose";
}

operation String toMultiline() : String {
	return self.toMultiline("\\l");
}

operation String toMultiline(newline : String) : String {
	var multiline = "";
	
	for (line in self.split("\\n")) {
		var length = 0;
		for (part in line.split(" ")) {
			multiline += part + " ";
			if (length > 20) {
				multiline += newline;
				length = 0;
			}
			else {
				length += part.length();
			}
		}
		if (not multiline.endsWith(newline)) multiline += newline;
		if (hasMore) multiline += "\\n";
	}
	if (not multiline.endsWith(newline)) multiline += newline;
	
	multiline = multiline.replaceAll('"', '\\\\"');
	
	return multiline;
}
%]